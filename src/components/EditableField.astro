---
const { label, field, value, type = "text", step, patientId } = Astro.props;
---

<div
  class="flex justify-between items-center py-3 border-b border-gray-200 dark:border-gray-700"
>
  <dt class="text-sm font-medium text-gray-500 dark:text-gray-300">{label}</dt>
  <dd class="flex items-center" data-field-container>
    <!-- Vista normal -->
    <span class="mr-4 text-gray-900 dark:text-gray-100" data-view-mode="true">
      {value}
    </span>

    <!-- Formulario de edición -->
    <form
      action={`/api/patients/${patientId}`}
      method="PUT"
      class="items-center hidden"
      data-edit-mode="true"
    >
      <input
        type={type}
        name={field}
        value={value}
        step={step}
        required
        class="mt-1 block w-1/2 rounded-md border-gray-300 shadow-sm dark:bg-gray-700 dark:border-gray-600 dark:text-white"
      />
      <button
        type="submit"
        class="ml-2 text-blue-600 dark:text-blue-400 hover:text-blue-500"
      >
        Guardar
      </button>
    </form>

    <button
      type="button"
      class="text-indigo-600 dark:text-indigo-400 hover:text-indigo-500 dark:hover:text-indigo-300"
      data-edit-button
    >
      Editar
    </button>
  </dd>
</div>

<script>
  // Obtener todos los contenedores de campos editables
  const fieldContainers = document.querySelectorAll("[data-field-container]");

  fieldContainers.forEach((container) => {
    const viewMode = container.querySelector("[data-view-mode]");
    const editMode = container.querySelector("[data-edit-mode]");
    const editButton = container.querySelector("[data-edit-button]");
    let isEditing = false;

    if (!viewMode || !editMode || !editButton) return;

    editButton.addEventListener("click", () => {
      isEditing = !isEditing;

      if (isEditing) {
        viewMode.classList.add("hidden");
        editMode.classList.remove("hidden");
        editButton.textContent = "Cancelar";
      } else {
        viewMode.classList.remove("hidden");
        editMode.classList.add("hidden");
        editButton.textContent = "Editar";
      }
    });

    // Manejar el envío del formulario
    const form = container.querySelector("form");
    if (form) {
      form.addEventListener("submit", async (e) => {
        e.preventDefault();

        const formData = new FormData(form);
        const value = formData.get(form.querySelector("input").name);

        try {
          const response = await fetch(form.action, {
            method: "PUT",
            headers: {
              "Content-Type": "application/json",
            },
            body: JSON.stringify({ [form.querySelector("input").name]: value }),
          });

          if (response.ok) {
            viewMode.textContent = value;

            isEditing = false;
            viewMode.classList.remove("hidden");
            editMode.classList.add("hidden");
            editButton.textContent = "Editar";
          } else {
          }
        } catch (error) {
          console.error("Error:", error);
        }
      });
    }
  });
</script>
